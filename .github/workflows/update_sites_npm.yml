name: Update NPM Package on hosts using Github APP

on:
  workflow_call:
    inputs:
      new_version:
        type: string
        required: true
      repos_to_update:
        type: string
        required: true
      package_name:
        type: string
        required: true
      wix_site:
          type: boolean
          required: false
          default: true
    secrets:
      GH_APP_ID:
        required: true
      GH_APP_PRIVATE_KEY:
        required: true
      WIX_CLI_API_KEY:
        required: true
      NPM_TOKEN:
        required: true

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: ${{ fromJSON(inputs.repos_to_update) }}

    steps:
      - name: Set up jq (to parse JSON)
        run: sudo apt-get install -y jq

      - name: Generate app JWT token
        id: generate_jwt
        uses: peter-murray/workflow-application-token-action@v2
        with:
          application_id: ${{ secrets.GH_APP_ID }}
          application_private_key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbkpPbnR1aG1LMjQ5M3RjKzhqZE5EL2dJaGJJS1pHbXc2T2kreHY0VXpKOG5VZ1YrCkF2VDY4Uzg5K3NmdnJjRlFVM3piM1NIRElVYnFPL2NGTW1VWUhETDkrQVRCQnVVQk9LdXdrQTZvTGFjUkxEY1UKeWNwTmJaS3hEekhMaVBlM0hiT1RoNmNIUk0xajBvOFlYM09SL0hJM3pmT1RQanV6dloyV3RSZjdUMGlrUTdtMApqYngyYkE1QmUrbW9ZVFVTbzU0R3hKb0pXa2lrMDUvOWFNbnZXczNHUkJNMzYxZFlrWm43T0VOV2VOSkFPNDNhClBTWVczUk5xNE5Jb2g4VG0zTDJnTGxLU09teHEySVVxRWR4SExXc25lWXV0Z1YzQ0ZEenFlQ3ZTOXJ0bzFRNHAKTDd4Tm9YQUxPSUNvY3cwdFd5RlpuN0dZaEEycFA5cEc3UEk2V3dJREFRQUJBb0lCQUFTMDQ0dTUvS2c5amhxTwp1ZE9xR2VUcS9jYVhEWHpyT0dnbjV1UXdhd3VqbFJrQUZVT2RmWldXWi9TTDRnYUZFeGNQWDhTTDZVT3MwQW14CmFUU1VtVjd2b1hhOUhkaEpOZm93SHdTVmpEU2pHdjhMUU5LNEJBL1JJd1ZqNTh4Y05lTHNyUGljNnJrRXU0VnUKeTdyQ3pKYWNFRlZlaHdTTjR0OUdSMnQySnhYQSt6Uk5KUHRiSGlOSmhGbnRCYmNTcERZTytZaWtWRm00YXF5SgorNWV5dThNK2pLcm5zSHBySnVIbFgxSDN5c3NXaWFPZlMwR1haSlJWeXhoT3BHT05VaHFJS0FLQUhMT3ljdkp0CmdNN1JyYlhxTWJLZG1HOXJaQ2Qzam1TUHJYT0xaZGZHekV2UXNqc2doWWhBVjRjeHJyMmRENE0xNnFPWFlLajUKSTF0SEtPRUNnWUVBem0zb0Z2a0VxVkxmeE1Majl1b2RwTEIrYll5QmhuS0lKY2pJK0VnY0JYOGVUZUtnTjBPVAplOXgvZ1NPc2pmS0hFWU5xb0pFaGgrUmg2Y2N4RVlFVTJNdnpEVUhzWFFPbHIzNkNvQ1NvQUdqWUJMTkpDcFZzClBmRXUvMFhKbjNzdDEwLzZtSlpOcXJtZGdWYVplTTgvSjRMb0ZPelB5UmpFZTFwdE5OSVpCck1DZ1lFQXdpMFoKY05BNHhzN2xQaWpjSi9kdlhrUE1PVjNNZmZYeVdIUURjaEVMQnZnNzA2MEloanFuNGtuOS9XbzJBSXhidUxSZwp0UUk0UVk2Yk9pSi8vZ3oyaUR5dUxMS3ZtbGJhcVF0MlN2MUJNOWtlZmVUQ29UcjVvTi9IUHB2a3F5TVR3WExNCjNPNEh0ZWF2WGR2eEYwVUxYZ3FyZWpQZHErQi9keVJaQkFRcmtia0NnWUFXZXUrWWVOdmlHSzFYdnlXV1FSNmoKVGJrbTh2TTBFZ3J6bW04UVlzSHljMHA0anVLRndpMHdndTI3d1lmTUdZcE9CUEs2czdOa0dpSHpsSWFxY2xVegoydG9JS3BLeittNnpzdUpFMEZrZldrdVVEM1kzMmRmazB2d2NQcHhiYXMydU1mNkhXVzd4MWE3cVkrVG92Q0VUCmkzVDh1bUZTZEFrSnFlcFVvMENvY3dLQmdRQ3UyOEFpT0ZBNHNBMytlUHN3dm9DNnlhRDZNLzYzbTZpK2dOS3QKZ0syR2ZEb2I5NkZLaHoyeDZPSGh1Q2lqTzhKSlJaNGt3cmY0U1R4K0VKMWtJVFpOSHgvV1BwOG1CSHJxYWRqLwoxS3BIejRqRzVCOWs0OS95UURLRHJnMHhFK2h4ZHprRzV3OW9makdEKzFGVG5DaU5hbHhiTXFPM2FQWkFTeW9pCkZNTkxlUUtCZ1FDb1BNTWdWQlpmNnlhTFJOa3RFMi9JSld3NjcvdEhUaFJ0U1pHMjlUMDFmRDl4MUUxek5CcUoKVDllbWtKTVZtMEZaYkJoMExUMCtSK21ZSTJOckd6Smg4Y1N2MW5PZlRxN1M5d2lneGh1NVlVL0JhaDg2bnRVVQpwU2ZJYktaWjZ5ODc0ZUlrZEQ5T3BSOXhFSERVYjdtSE11NS9TbnlYN2Ftd0ZGK1VYQW52ZWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="

      - name: Print JWT token info
        run: |
          token="${{ steps.generate_jwt.outputs.token }}"
          echo "Token length: ${#token}"
      
      - name: Fetch installations raw
        env:
          JWT_TOKEN: ${{ steps.generate_jwt.outputs.token }}
        run: |
          owner=$(echo "${{ matrix.repo }}" | cut -d'/' -f1)
          repo=$(echo "${{ matrix.repo }}" | cut -d'/' -f2)
          echo "Processing repo: $owner/$repo"

          echo "Fetching all installations..."
          installations=$(curl -sSL -H "Authorization: Bearer $JWT_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/app/installations)

          echo "Raw installations response:"
          echo "$installations"
      
      - name: Get installation ID by repo owner
        id: get_installation_id
        env:
          JWT_TOKEN: ${{ steps.generate_jwt.outputs.token }}
        run: |
              owner=$(echo "${{ matrix.repo }}" | cut -d'/' -f1)
              repo=$(echo "${{ matrix.repo }}" | cut -d'/' -f2)
              echo "Processing repo: $owner/$repo"
          
              echo "Fetching all installations..."
              installations=$(curl -sSL -H "Authorization: Bearer $JWT_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                https://api.github.com/app/installations)
          
              echo "Raw installations response:"
              echo "$installations" | jq .
          
              installation_id=$(echo "$installations" | jq -r --arg owner "$owner" '.installations[] | select(.account.login==$owner) | .id')
              echo "Installation ID found for $owner: $installation_id"
          
              if [[ -z "$installation_id" || "$installation_id" == "null" ]]; then
                echo "❌ Error: No installation found for owner $owner"
                exit 1
              fi
          
              echo "installation_id=$installation_id" >> $GITHUB_OUTPUT
          

      - name: Generate installation token
        id: generate_installation_token
        run: |
          installation_id=${{ steps.get_installation_id.outputs.installation_id }}
          echo "Generating installation token for installation ID: $installation_id"
          token_response=$(curl -sSL -X POST \
            -H "Authorization: Bearer ${{ steps.generate_jwt.outputs.token }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/app/installations/$installation_id/access_tokens")
          echo "Raw token response:"
          echo "$token_response" | jq .
          token=$(echo "$token_response" | jq -r '.token')
          echo "Installation token: $token"
          echo "installation_token=$token" >> $GITHUB_OUTPUT

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repo }}
          token: ${{ steps.generate_installation_token.outputs.installation_token }}
          ref: main

      - name: Setup NPM auth
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          echo "NPM auth file created at ~/.npmrc"

      - name: Install dependencies
        run: npm ci

      - name: Install Wix CLI
        if: ${{ inputs.wix_site }}
        run: npm install -g @wix/cli

      - name: Login to Wix
        if: ${{ inputs.wix_site }}
        run: wix login --api-key ${{ secrets.WIX_CLI_API_KEY }}

      - name: Bump NPM package version
        run: |
          echo "Updating package ${{ inputs.package_name }} to version ${{ inputs.new_version }}"
          npm install ${{ inputs.package_name }}@${{ inputs.new_version }} --save-exact
          if [ "${{ inputs.wix_site }}" = "true" ]; then
            echo "Running wix install..."
            wix install
          fi

      - name: Add changes to git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "Adding files to git..."
          git add package.json package-lock.json
          if [ "${{ inputs.wix_site }}" = "true" ]; then
            git add wix.lock
          fi

      - name: Create Pull Request 
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.generate_installation_token.outputs.installation_token }}
          commit-message: "fix: update ${{ inputs.package_name }} to v${{ inputs.new_version }}"
          title: "fix: update ${{ inputs.package_name }} to v${{ inputs.new_version }}"
          body: "Bumps the version of ${{ inputs.package_name }} to `v${{ inputs.new_version }}` to bring it up to date."
          branch: "update-${{ inputs.package_name }}-v${{ inputs.new_version }}"
